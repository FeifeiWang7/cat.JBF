keyings (in-kernel key management and retention facility)

The keyrings facility is primarily a way for drivers to retain or cache security data, authentication keys, encryption keys and other data in the kernel.

A key contains the following elements:

- serial number: a unique integer to identify a key in system call

- type

- description: a string that is used to search the key. It can be partially matched or exactly matched

- payload: actual content of a key. It is usually set when a key is created, but it is possible for the kernel to upcall to userspace to get the key if that key is unknown

- assess rights

- expiration time

- reference count: keys are referenced by keyrings, by current active users and by a process's credentials. When the reference count reaches zero, the key is scheduled for garbage collection.


struct key {
         atomic_t                usage;          /* number of references */
         key_serial_t            serial;         /* key serial number */
         union {
                 struct list_head graveyard_link;
                 struct rb_node  serial_node;
         };
         struct rw_semaphore     sem;            /* change vs change sem */
         struct key_user         *user;          /* owner of this key */
         /*
              struct key_user {
              struct rb_node          node;
              struct mutex            cons_lock;      /* construction initiation lock */
              spinlock_t              lock;
              atomic_t                usage;          /* for accessing qnkeys & qnbytes */
              atomic_t                nkeys;          /* number of keys */
              atomic_t                nikeys;         /* number of instantiated keys */
              kuid_t                  uid;
              int                     qnkeys;         /* number of keys allocated to this user */
              int                     qnbytes;        /* number of bytes allocated to this user */
              };
        */
         void                    *security;      /* security data for this key */
         union {
                 time_t          expiry;         /* time at which key expires (or 0) */
                 time_t          revoked_at;     /* time at which key was revoked */
         };
         time_t                  last_used_at;   /* last time used for LRU keyring discard */
         kuid_t                  uid;
         kgid_t                  gid;
         key_perm_t              perm;           /* access permissions */
         unsigned short          quotalen;       /* length added to quota */
         unsigned short          datalen;        /* payload data length
                                                  * - may not match RCU dereferenced payload
                                                  * - payload should contain own length
                                                  */
 
         unsigned long           flags;          /* status flags (change with bitops) */
 #define KEY_FLAG_INSTANTIATED   0       /* set if key has been instantiated */
 #define KEY_FLAG_DEAD           1       /* set if key type has been deleted */
 #define KEY_FLAG_REVOKED        2       /* set if key had been revoked */
 #define KEY_FLAG_IN_QUOTA       3       /* set if key consumes quota */
 #define KEY_FLAG_USER_CONSTRUCT 4       /* set if key is being constructed in userspace */
 #define KEY_FLAG_NEGATIVE       5       /* set if key is negative */
 #define KEY_FLAG_ROOT_CAN_CLEAR 6       /* set if key can be cleared by root without permission */
 #define KEY_FLAG_INVALIDATED    7       /* set if key has been invalidated */
 #define KEY_FLAG_TRUSTED        8       /* set if key is trusted */
 #define KEY_FLAG_TRUSTED_ONLY   9       /* set if keyring only accepts links to trusted keys */
 #define KEY_FLAG_BUILTIN        10      /* set if key is builtin */
 #define KEY_FLAG_ROOT_CAN_INVAL 11      /* set if key can be invalidated by root without permission */
 
         /* the key type and key description string
          * - the desc is used to match a key against search criteria
          * - it should be a printable string
          * - eg: for krb5 AFS, this might be "afs@REDHAT.COM"
          */
         union {
                 struct keyring_index_key index_key;
                 struct {
                         struct key_type *type;          /* type of key */
                         char            *description;
                 };
         };
 
         /* type specific data
          * - this is used by the keyring type to index the name
          */
         union {
                 struct list_head        link;
                 unsigned long           x[2];
                 void                    *p[2];
                 int                     reject_error;
         } type_data;
 
         /* key data
          * - this is used to hold the data actually used in cryptography or
          *   whatever
          */
         union {
                 union {
                         unsigned long           value;
                         void __rcu              *rcudata;
                         void                    *data;
                         void                    *data2[2];
                 } payload;
                 struct assoc_array keys;
         };
 };
 
